// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id String @id @db.VarChar(255)
  products Product[]
  name String @db.VarChar(64)
  created_at DateTime? @db.Timestamp()
  updated_at DateTime? @updatedAt @db.Timestamp()

  @@map("categories")
}

model Role {
  id String @id @db.VarChar(255)
  users UserRole[]
  name String @db.VarChar(64)
  created_at DateTime? @db.Timestamp()
  updated_at DateTime? @updatedAt @db.Timestamp()

  @@map("roles")
}

model User {
  id String @id @db.VarChar(255)
  roles UserRole[]
  carts Cart[]
  username String @db.VarChar(64)
  email String @db.VarChar(64) @unique
  image String @default("default-user.png")
  phone_number  String @db.VarChar(15)
  password String @db.VarChar(255)
  email_verified_at DateTime? @db.Timestamp()
  created_at DateTime? @db.Timestamp()
  updated_at DateTime? @updatedAt @db.Timestamp()

  @@map("users")
}

model Product {
  id String @id @db.VarChar(255)
  category Category @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  categoryId String @db.VarChar(255)
  carts Cart[]
  name String @db.VarChar(255) 
  slug String @db.LongText
  image String @default("default-product.png")
  description String @db.LongText
  price Float @db.Double
  stock Int

  @@map("products")
}

model Cart {
  id String @id @db.VarChar(255) 
  product Product @relation(fields: [product_id], references: [id]) 
  product_id String @db.VarChar(255)
  user User @relation(fields: [user_id], references: [id])
  user_id String @db.VarChar(255)

  @@map("carts")
}

model UserRole {
  role   Role     @relation(fields: [roleId], references: [id])
  roleId String @db.VarChar(255) 
  user   User @relation(fields: [userId], references: [id])
  userId String @db.VarChar(255)
  created_at DateTime? @db.Timestamp()
  updated_at DateTime? @updatedAt @db.Timestamp()

  @@id([roleId, userId])
  @@map("users_roles")
}